[["software-setup.html", "Software Setup 1.9 Installing software 1.10 Basic usage 1.11 Getting the course data", " Software Setup This Chapter helps you prepare for the course. It shows how to install R and RStudio on your computer. We’ll also provide some general information on R, and how you can get help if you get error messages. If you’re already using R, all of this might be nothing new for you. You may skip this chapter then. If you have never used R before, this Chapter is essential, as it gives you some input on how R works, and how we can use it for our data analyses. 1.9 Installing software Before we start the course, we have to install three things: R, a free program for statistical programming RStudio, a user interface which makes it easier to work with R; overlook our data, packages and output. Several packages, which are ‘add-ons’ for R with functions to do specific analyses. They also include the documentation (help files) that describes how to use them, and sample data. 1.9.1 Installing R The latest R Version is available here Based on your operating system (Linux, Mac, Windows), click Download. If you use Windows, click Download R for Windows: Find ‘base’ under subdirectories -&gt; Click ‘install R for the first time’ -&gt; Click Download R 3.6.3 (or another version) for Windows If you use Mac, click Download R for (Mac) OS X: Find the header ‘Latest release’ -&gt; Click R-3.6.3.pkg (or another version) If you use Linux, click Download R for Linux: Choose your Linux distribution (debian/, redhat/, suse/, ubuntu/) -&gt; Open the terminal -&gt; Run the installation command 1.9.2 Installing RStudio Download RStudio on the RStudio Website (Link). It’s free! 1.9.3 Installing packages As a prerequisite for this guide, you need to have a few essential R packages installed. Open RStudio Inside RStudio, find the window named Console on the bottom left corner of your screen (it might fill the entire left side of the screen). We will now install a few packages using R Code. Here’s an overview of the packages, and why we need them: Package Description lavaan A sophisticated and user-friendly package for structural equation modeling ggplot2 A flexible and user-friendly package for making graphs tidySEM Plotting and tabulating the output of SEM-models semTools Comparing models, establishing measurement invariance across groups psych Descriptive statistics foreign Loading data from SPSS ‘.sav’ files readxl Loading data from Excel ‘.xslx’ files To install these packages, we use the install.packages() function in R. One package after another, our code should look like this: install.packages(&quot;tidySEM&quot;, dependencies = TRUE) Don’t forget to put the package names in ““. Otherwise, you will get an error message. 1.10 Basic usage 1.10.1 Starting a new project in Rstudio To keep all your work organized, you should use a project. In Rstudio, click on the New project button: In the pop-up dialog, click New directory, and again New project. type the desired directory name in the dialog (give it a meaningful name, e.g. “TCSM_course”), and use ‘Browse’ if you need to change the directory where you store your projects. Now, in your project, click File &gt; New file &gt; R script. This script file works just like notepad, or the syntax editor in SPSS: You type plain text, but you can run it any time you want. Conduct all of the exercises in this script file. 1.10.2 Code conventions Throughout the guide, a consistent set of conventions is used to refer to code: Functions are in a code font and followed by parentheses, like sum() or mean(). Other R objects (like data or function arguments) are in a code font, without parentheses, like seTE or method.tau. Sometimes, we’ll use the package name followed by two colons, like lavaan::sem(). This is valid R code and will run. The lavaan:: part indicates that the function sem() comes from the package lavaan. 1.10.3 Getting Help As you start to apply the techniques described in this guide to your data you will soon find questions that the guide does not answer. This section describes a few tips on how to get help. Every function in R has documentation (a help file). To see it, select the name of the function and press F1, or run the command ? followed by the name of the function, e.g.: ?aov. I have been using R for 10 years, and I still press F1 all the time to see how a function works. Andy Field, the book used for our undergraduate statistics courses [@field2012discovering], is also available for R. Many basic analyses are explained for R in this book. If you get stuck, start with Google. Typically, adding “R” to a search is enough to restrict it to relevant results, e.g.: “exploratory factor analysis R”. Google is particularly useful for error messages. If you get an error message and you have no idea what it means, try googling it. Chances are that someone else has been confused by it in the past, and there will be help somewhere on the web. (If the error message isn’t in English, run Sys.setenv(LANGUAGE = \"en\") and re-run the code; you’re more likely to find help for English error messages.) If Google doesn’t help, try stackoverflow. Start by spending a little time searching for an existing answer; including [R] restricts your search to questions and answers that use R. Lastly, if you stumble upon an error (or typos!) in this guide’s text or R syntax, feel free to contact Caspar van Lissa at c.j.vanlissa@uu.nl. 1.11 Getting the course data All of the course data files are available on a GitHub repository. You can download them all at once by going to https://github.com/cjvanlissa/TCSM_student, clicking the green button labeled ‘Code’, and downloading a ZIP archive of the repository. After unzipping the archive, you can open the RStudio project ‘TCSM_student.Rproj’, and the script ‘run_me.R’. This script contains a few lines of code to help you install the required R-packages for the course. "],["reading-data-into-r.html", "Reading data into R 1.12 Using R projects 1.13 Importing Excel Files 1.14 Importing SPSS Files 1.15 Data manipulation (optional)", " Reading data into R This optional chapter will tell you about how you can import data in R. We will also go over a few commands to manipulate data in R. 1.12 Using R projects One advantage of using an R project is that the project directory is automatically set as the working directory. Just copy your data file to the folder that contains the “.Rproj” file, and you will be able to load files by name. 1.13 Importing Excel Files One way to get Excel files directly into R is by using the readxl package. Install the package, and try using the read_excel() function to load the data, and assign it to an object called df: ## Load the package: library(readxl) ## Read the first sheet of &#39;your_file.xlsx&#39; into &#39;df&#39;: df &lt;- read_excel(&quot;your_file.xlsx&quot;, sheet = 1) 1.13.1 Inspect the data R does not work with a single spreadsheet (SPSS or Excel). Instead, it can keep many objects in memory. The object df is a data.frame; an object that behaves similar to a spreadsheet. To see a description of the object, look at the Environment tab in the top right of Rstudio, and click the arrow next to df. As you can see, the on the top-right pane Environment, your file is now listed as a data set in your RStudio environment. You can make a quick copy of this data set by assigning the df object to a new object. This way, you can edit one, and leave the other unchanged. Assign the object df to a new object called df_backup: df_backup &lt;- df You can also have a look at the contents of df by clicking the object in the Environment panel, or running the command head(df). 1.14 Importing SPSS Files SPSS files can be loaded using the foreign package. All SPSS files for this course are available for download here. ## Load the foreign library library(foreign) ## Read the SPSS data into &#39;df&#39;: df &lt;- read.spss(&quot;Sesam2.sav&quot;, to.data.frame = TRUE) 1.15 Data manipulation (optional) Now that we have the data in R, let’s manipulate the data a bit. The following functions might come in handy later on. Going back to the output of the str() function, we see that this also gives us details on the type of column data we have stored in our data. There a different abbreviations signifying different types of data. Abbreviation Type Description num Numeric All values are numbers (e.g., 1.02) chr Character All values are words log Logical Boolean flags: TRUE or FALSE factor Factor A special type of object with labels to represent the levels of a categorical variable 1.15.1 Converting to factors Let’s look at the variable df$VIEWCAT. This is a categorical variable, coded as a numerical one. We can have a look at this variable by typing the name of our dataset, then adding the selector $ and then adding the variable we want to have a look at. This variable is currently a numeric vector. We want it to be a factor: That’s a categorical variable. To convert this to a factor variable now, we use the factor() function. df$VIEWCAT &lt;- factor(df$VIEWCAT) We now see that the variable has been converted to a factor with the levels “1”, “2”, “3”, and “4”. We can assign different value labels as follows: df$VIEWCAT &lt;- factor(df$VIEWCAT, labels = c(&quot;Rarely&quot;, &quot;Sometimes&quot;, &quot;Regularly&quot;, &quot;Often&quot;)) 1.15.2 Selecting specific cases It may often come in handy to select certain cases for further analyses, or to exclude some studies in further analyses (e.g., if they are outliers). To do this, we can use the [] operator to index our data. Let’s say we want to get only the first 5 cases. We can select them like so: df[1:5, ] ## ID SITE SEX AGE VIEWCAT SETTING VIEWENC PREBODY PRELET PREFORM PRENUMB ## 1 1 DIC 1 66 Rarely 2 1 16 23 12 40 ## 2 2 DIC 2 67 Regularly 2 1 30 26 9 39 ## 3 3 DIC 1 56 Regularly 2 2 22 14 9 9 ## 4 4 DIC 1 49 Rarely 2 2 23 11 10 14 ## 5 5 DIC 1 69 Often 2 2 32 47 15 51 ## PRERELAT PRECLAS POSTBODY POSTLET POSTFORM POSTNUMB POSTREL POSTCLAS PEABODY ## 1 14 20 18 30 14 44 14 23 62 ## 2 16 22 30 37 17 39 14 22 80 ## 3 9 8 21 46 15 40 9 19 32 ## 4 9 13 21 14 13 19 8 15 27 ## 5 17 22 32 53 18 54 14 21 71 Or let’s say we only want the children younger than 36 months in the dataset. In this case, we can use boolean indexing: We create a TRUE / FALSE statement, and select the cases that are TRUE: df[df$AGE &lt; 36, ] ## ID SITE SEX AGE VIEWCAT SETTING VIEWENC PREBODY PRELET PREFORM PRENUMB ## 24 24 DIC 1 35 Often 1 1 11 6 8 16 ## 28 28 DIC 2 34 Often 1 1 17 13 7 10 ## 43 43 DIC 2 35 Regularly 1 2 23 12 8 9 ## PRERELAT PRECLAS POSTBODY POSTLET POSTFORM POSTNUMB POSTREL POSTCLAS PEABODY ## 24 8 9 22 27 16 20 14 15 40 ## 28 5 11 21 17 13 13 10 15 42 ## 43 5 5 29 11 8 9 11 11 32 Note that this approach can be used for any other type of data and variable. We can also use it to e.g., only select studies where VIEWCAT was equal to “Often” “typical”: df[df$VIEWCAT == &quot;Often&quot;, ] ## ID SITE SEX AGE VIEWCAT SETTING VIEWENC PREBODY PRELET PREFORM PRENUMB ## 5 5 DIC 1 69 Often 2 2 32 47 15 51 ## 9 9 DIC 1 69 Often 2 1 27 44 18 42 ## 12 12 DIC 2 58 Often 2 2 21 25 13 29 ## 18 18 DIC 1 45 Often 2 1 16 12 8 11 ## 21 21 DIC 2 65 Often 2 1 29 24 14 41 ## PRERELAT PRECLAS POSTBODY POSTLET POSTFORM POSTNUMB POSTREL POSTCLAS PEABODY ## 5 17 22 32 53 18 54 14 21 71 ## 9 15 20 32 50 17 48 14 24 49 ## 12 16 21 27 29 15 40 13 19 58 ## 18 6 3 25 16 11 17 9 9 29 ## 21 10 23 29 48 20 51 15 24 55 1.15.3 Changing cell values Sometimes, even when preparing your data in EXCEL, you might want to change values in RStudio once you have imported your data. To do this, we have to select a cell in our data frame in RStudio. This can be done by adding [x,y] to our dataset name, where x signifies the number of the row we want to select, and y signifies the number of the column. To see how this works, let’s select a variable using this command first: df[8,1] ## [1] 8 We now see the 8th study in our dataframe, and the value of this study for Column 1 (participant ID) is displayed. Let’s say we had a typo in this name and want to have it changed. In this case, we have to give this exact cell a new value. df[8,1] &lt;- 1001 Let’s check if the value has changed. df[8,1] ## [1] 1001 You can also use this function to change any other type of data, including numericals and logicals. Only for characters, you have to put the values you want to insert in \"\". "],["r-tutorial-for-beginners-optional.html", "R tutorial for beginners (Optional) 1.16 Who R you? 1.17 RStudio 1.18 Loading data 1.19 Explore your data 1.20 Plotting the data 1.21 Analyze your data", " R tutorial for beginners (Optional) Welcome to the world of R! This tutorial is based on the tutorial “R: How to get started” by Ihnwhi Heo, Duco Veen, and Rens van de Schoot, and adapted for TCSM. 1.16 Who R you? R is… Free programming software for statistical computation and graphics Open source: everyone (even you!) can improve, develop, and contribute to R The official manual by the R Core Team: An introduction to R R itself looks a bit old-fashioned and tedious: 1.17 RStudio Thankfully, we have a great user interface for R, called RStudio! RStudio helps users to use and learn R easier If you are using RStudio, this means you are using R. From now on, all tutorials will go with RStudio. 1.17.1 No ‘pane’, no gain! When you open RStudio, the screen may look like this. You may notice that the screen is divided into A ‘panes’ (a pane is a division of a window): Before we explain these three panes - I want you to add the fourth one, which you will see if you open an R script. An R script is like a “new document” in Microsoft Word. When you open an R script, the fourth pane appears. 1.17.2 Create a new R script Click the icon with a plus sign on the paper. Click the icon highlighted by the red square: When you click the icon, a new script appears in a fourth pane on the upper left side of the screen The four panes really help become organized. In RStudio, you can do everything all together on one screen. Thus, four panes make the work efficient (indeed, no ‘pain’!). 1.17.3 What do the four panes do? Out of four panes, the two on the left side are the panes you will use a lot. Source pane: located at the top left side of the screen. It is also called the “editor”, because this is where we edit scripts. We will usually type our code in the source pane. Console pane: located at the bottom left side of the screen. This panel is for direct communication with R. We can type commands here that are immediately evaluated (whereas a script is only evaluated when we run it). Furthermore, all output of our commands is printed in this console pane. The panels on the right side of the screen contain various tabs. Among those tabs, it is worth looking at the Environment tab at the upper pane and the Plots tab at the lower pane. The Environment tab contains all the ‘objects’ currently loaded in your R session. In SPSS, you can have only one data file open. In R, you can have as many data ‘objects’ as you like. They will be listed here. You can always check what objects are loaded under the environment tab. The environment is also called the ‘workspace’. The Plots tab shows various graphs and figures we draw. If you click Zoom with the magnifying glass, you can see plots in a bigger size. 1.18 Loading data Statistical analysis cannot happen without data. In R, you can load data in various ways. Let’s see the easiest way. To download the dataset (LifeSat) for this tutorial, see the Chapter Getting the course data. 1.18.1 Mouse clicks Click File -&gt; Import Dataset -&gt; Choose the type of dataset. In this tutorial, we will use the SPSS dataset. Thus, click ‘From SPSS’. Suddenly, you may encounter an Install Required Packages pop-up with a message that asks you whether you want to install the haven package now. A package is an “enhancement” for R; in this case, an enhancement to allow it to read SPSS files. Click ‘Yes’. Then, the Import Statistical Data pop-up appears -&gt; See File/URL -&gt; Click Browse at the right end -&gt; Open your file You will see your data in the Data Preview. If you look at the Import Options, you can set the name of your data file and the format of it. All of your ‘mouse-clicking’ is being translated to the R-code required to load your file. In the Code Preview, the steps required for loading the data are expressed in terms of code. Now, it’s time to load your data to R. How? Just click Import at the lower right side of the pop-up. In our example, the name of the dataset is LifeSat. 1.18.2 Loading data with R code Let’s try to load the data with R code. In this course, we use the read.spss function from the library(foreign). It works best with all exercises. Write the following code in an R-script: ## re-encoding from CP1252 library(foreign) LifeSat &lt;- read.spss(&quot;LifeSat.sav&quot;, to.data.frame = TRUE, use.value.labels = FALSE) Select these lines with the mouse. Press the Ctrl and Enter buttons together. The lines of code are now evaluated by R, and R is telling you the result of its actions in the console pane. There are many different ways to load data into R. During this course, we will see a few of them. 1.19 Explore your data As you saw, you can type some R codes in the source pane and run the codes by pressing Ctrl and Enter together to make R work. If you look at the R codes we used in loading the data, you see the instructions read_sav() and View(). These are called functions. A functions is an instruction for R to perform a task. When you use functions, you should type certain comments or inputs in the parentheses, which make the functions work. Those comments or inputs are called arguments. Let’s learn three new functions with their arguments. They are used in understanding the data. 1.19.1 head() The data consist of many rows. If you would like to inspect the first several rows (to see how the data look), the head() function achieves your purpose. For the head() function, you will use only one argument: The name of the dataset. # Inspect the first several rows head(LifeSat) ## LifSat age educ gender female ChildSup SpouSup SES ## 1 13 75 6 2 0 4 2 3 ## 2 18 75 5 2 0 6 5 1 ## 3 19 72 5 2 0 6 5 1 ## 4 24 72 6 2 0 6 4 1 ## 5 24 70 5 1 1 6 5 1 ## 6 24 73 6 2 0 8 6 1 “Wait, what is the hash tag (#) doing there?” Don’t be surprised. The hash tag creates a “comment”; a bit of text that will not be evaluated by R. This is useful because we can write notes to help us remember what we are doing when there are many lines of code. Writing comments also helps when you have someone else review your code. Let’s run the code by pressing Ctrl and Enter together. R shows you the first six rows of the dataset in the console pane. You may be curious about some NAs in the output. NA refers to ‘Not Available’. Those are missing values. 1.19.2 Extracting one variable It is possible to extract a variable from the data using the dollar sign, $. In R, the dollar sign means: Take this object (a variable) out of another object (the data). In the example below, we ask R to take the variable LifSat out of the data.frame LifeSat: LifeSat$LifSat ## [1] 13 18 19 24 24 24 30 33 33 33 33 33 35 35 37 37 41 41 41 ## [20] 43 43 43 44 44 44 45 47 48 48 48 50 51 51 52 53 53 53 53 ## [39] 54 55 55 56 56 56 57 58 58 58 58 58 58 59 59 60 61 61 63 ## [58] 63 63 65 66 67 67 67 67 68 68 68 69 69 69 69 69 70 70 70 ## [77] 71 72 74 74 76 77 77 78 78 79 79 79 81 81 82 83 85 86 87 ## [96] 91 99 100 We see all 98 unique values. 1.19.3 Extracting rows and columns It is possible to extract rows or columns from the data using data[row_numbers, col_numbers]. For example, the first four rows of the first two columns: LifeSat[1:4, 1:2] ## LifSat age ## 1 13 75 ## 2 18 75 ## 3 19 72 ## 4 24 72 By leaving either rows or columns empty, we get all rows or columns: LifeSat[ , 1:2] ## LifSat age ## 1 13 75 ## 2 18 75 ## 3 19 72 ## 4 24 72 ## 5 24 70 ## 6 24 73 ## 7 30 72 ## 8 33 72 ## 9 33 68 ## 10 33 73 ## 11 33 72 ## 12 33 71 ## 13 35 68 ## 14 35 71 ## 15 37 72 ## 16 37 68 ## 17 41 67 ## 18 41 67 ## 19 41 70 ## 20 43 71 ## 21 43 68 ## 22 43 69 ## 23 44 67 ## 24 44 68 ## 25 44 72 ## 26 45 70 ## 27 47 64 ## 28 48 72 ## 29 48 71 ## 30 48 71 ## 31 50 67 ## 32 51 71 ## 33 51 70 ## 34 52 71 ## 35 53 72 ## 36 53 69 ## 37 53 70 ## 38 53 75 ## 39 54 72 ## 40 55 66 ## 41 55 73 ## 42 56 69 ## 43 56 73 ## 44 56 74 ## 45 57 70 ## 46 58 73 ## 47 58 70 ## 48 58 72 ## 49 58 70 ## 50 58 70 ## 51 58 75 ## 52 59 72 ## 53 59 72 ## 54 60 70 ## 55 61 70 ## 56 61 71 ## 57 63 70 ## 58 63 72 ## 59 63 72 ## 60 65 68 ## 61 66 71 ## 62 67 70 ## 63 67 73 ## 64 67 66 ## 65 67 69 ## 66 68 68 ## 67 68 73 ## 68 68 74 ## 69 69 72 ## 70 69 68 ## 71 69 67 ## 72 69 68 ## 73 69 69 ## 74 70 69 ## 75 70 75 ## 76 70 74 ## 77 71 70 ## 78 72 71 ## 79 74 68 ## 80 74 69 ## 81 76 68 ## 82 77 73 ## 83 77 69 ## 84 78 69 ## 85 78 73 ## 86 79 67 ## 87 79 67 ## 88 79 69 ## 89 81 69 ## 90 81 69 ## 91 82 71 ## 92 83 72 ## 93 85 65 ## 94 86 68 ## 95 87 65 ## 96 91 68 ## 97 99 70 ## 98 100 69 LifeSat[1:2, ] ## LifSat age educ gender female ChildSup SpouSup SES ## 1 13 75 6 2 0 4 2 3 ## 2 18 75 5 2 0 6 5 1 We can refer to columns by name, too: LifeSat[1:2, c(&quot;age&quot;, &quot;educ&quot;)] ## age educ ## 1 75 6 ## 2 75 5 1.19.4 str() It is of interest to know what types of variables are in the dataset. For example, if you want to run an analysis of variance (ANOVA), the independent variable should be categorical, and we should check if it is the case. For this purpose, you can use the str() function; where str is short for structure. In running this function, you need one argument, which is again the name of the dataset. # Structure of the dataset str(LifeSat) ## &#39;data.frame&#39;: 98 obs. of 8 variables: ## $ LifSat : num 13 18 19 24 24 24 30 33 33 33 ... ## $ age : num 75 75 72 72 70 73 72 72 68 73 ... ## $ educ : num 6 5 5 6 5 6 6 5 7 6 ... ## $ gender : num 2 2 2 2 1 2 1 2 1 1 ... ## ..- attr(*, &quot;value.labels&quot;)= Named chr [1:2] &quot;2&quot; &quot;1&quot; ## .. ..- attr(*, &quot;names&quot;)= chr [1:2] &quot;male&quot; &quot;female&quot; ## $ female : num 0 0 0 0 1 0 1 0 1 1 ... ## $ ChildSup: num 4 6 6 6 6 8 8 7 4 8 ... ## $ SpouSup : num 2 5 5 4 5 6 4 6 2 8 ... ## $ SES : num 3 1 1 1 1 1 1 2 2 2 ... ## ..- attr(*, &quot;value.labels&quot;)= Named chr [1:3] &quot;3&quot; &quot;2&quot; &quot;1&quot; ## .. ..- attr(*, &quot;names&quot;)= chr [1:3] &quot;high SES&quot; &quot;middle SES&quot; &quot;low SES&quot; ## - attr(*, &quot;variable.labels&quot;)= Named chr [1:8] &quot;&quot; &quot;&quot; &quot;Years of education&quot; &quot;&quot; ... ## ..- attr(*, &quot;names&quot;)= chr [1:8] &quot;LifSat&quot; &quot;age&quot; &quot;educ&quot; &quot;gender&quot; ... ## - attr(*, &quot;codepage&quot;)= int 1252 According to the output in the console pane, the dataset consists of 98 observations and 8 variables. variables. This means that our dataset has 98 rows and 8 columns. It is written that respnr: num 1 2 3 4 5 6 7 8 9 10 … It means that the respnr variable is a number (abbreviated as num), and 1 is the value in the first row, 2 is the value in the second row, 3 is the value in the third row, and so on. 1.19.5 summary() How can we know about the mean, median, minimum, and maximum of the variables of interest? You can get the descriptive statistics of the variables with the summary() function. Again, you only need one argument, which is the name of the dataset. summary(LifeSat) Let’s look at the output in the console pane. The descriptive statistics per variable is given. For example, for the variable LifSat, the minimum value is 1.455, the median is 3.636, and the mean is 3.628. This summary is a bit messy; you can get a nicer summary using the describe() function from the psych package. We will learn more about this in the course. 1.20 Plotting the data It is always a good idea to look into your data visually. For example, you would like to know the relationship between two specific variables in your data, the distribution of values, and more. We will introduce three basic functions for plotting data. After you run these functions, the output appears in the Plots tab at the lower right pane. For plots, we use the ggplot2 package. If the package will not load when you run the code below, you may have skipped some essential steps in 1.9.3. library(ggplot2) 1.20.1 Histogram Are you curious about how the values of a continuous variable are distributed? Drawing a histogram is one way of examining the distribution. # Set up the data for the plot and select the variable to plot using aes: ggplot(data = LifeSat, aes(x = LifSat)) + geom_histogram() # Add a histgram ## `stat_bin()` using `bins = 30`. Pick better value with `binwidth`. 1.20.2 Boxplot A boxplot shows you how the data are dispersed from the median and whether the outliers exist. Let’s draw the boxplot of the variable, LifSat. Can you guess how to do this? # Same set up as in the previous example: ggplot(data = LifeSat, aes(x = LifSat)) + geom_boxplot() # Add a boxplot 1.20.3 Scatterplot What if we are interested in visually investigating the relationship between two variables, LifSat and age, in the data? One possible solution is to draw a scatterplot. In addition to the x variable from the previous examples, we can also specify a y variable: # Set up the data for the plot and select the variable to plot using aes: ggplot(data = LifeSat, aes(x = LifSat, y = age)) + geom_point() # Add scatter This code gives you the scatterplot of the two variables, LifSat and age. The variable, LifSat, is at the x-axis and the variable, age, is at the y-axis. 1.21 Analyze your data One of the strengths of R is its flexibility in running statistical analyses and producing graphical outputs. In the first week of the course, we will perform some standard analyses in R that you are already familiar with from previous courses. "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
