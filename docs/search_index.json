[["index.html", "Theory Construction and Statistical Modeling Course Information", " Theory Construction and Statistical Modeling Kyle M. Lang Last updated: 2022-09-07 Course Information In order to test a theory, we must express the theory as a statistical model and then test this model on quantitative (numeric) data. In this course we will use datasets from different disciplines within the social sciences (educational sciences, psychology, and sociology) to explain and illustrate theories and practices that are used in all social science disciplines to statistically model social science theories. This course uses existing tutorial datasets to practice the process of translating verbal theories into testable statistical models. If you are interested in the methods of acquiring high quality data to test your own theory, we recommend following the course Conducting a Survey which is taught from November to January. Most information about the course is available in this GitBook. Course-related communication will be through https://uu.blackboard.com (Log in with your student ID and password). "],["acknowledgement.html", "Acknowledgement", " Acknowledgement This course was originally developed by dr. Caspar van Lissa. Indeed, you will still see Caspar in the lecture recordings. I (dr. Kyle M. Lang) have modified Caspar’s original materials and take full responsibility for any errors or inaccuracies introduced through these modifications. Credit for any particularly effective piece of pedagogy should probably go to Caspar. You can view the original version of this course here on Caspar’s GitHub page. "],["instructors.html", "Instructors", " Instructors Coordinator: dr. Kyle M. Lang Lectures: dr. Kyle M. Lang Practicals: Rianne Kraakman Daniëlle Remmerswaal Laura Jochim "],["course-overview.html", "Course overview", " Course overview This course comprises three parts: Factor analysis: You will learn different ways of defining and estimating unobserved constructs. Path analysis: You will learn how to conduct regressions and ANOVAs as structural equation models with observed variables. Full structural equation modeling: You will combine the first two topics by estimating path models using latent variables. Each of these three themes will be evaluated with a separate assignment. Your course grade will be based on the weighted average of these three assignment grades. Schedule Course Week Calendar Week Topic Assignment 0 36 Preperation, Working w/ R 1 37 Introduction to statistical modeling 2 38 Exploratory factor analyis (EFA) 3 39 Confirmatory factor analysis (CFA) 4 40 N/A Project 1 Due 5 41 General linear model (GLM), Structural equation modeling (SEM) 6 42 Mediation 7 43 Moderation Project 2 Due 8 44 Full SEM 9 45 N/A Project 3 Due "],["learning-goals.html", "Learning goals", " Learning goals In this course you will learn how to translate a social scientific theory into a statistical model, how to analyze your data with these models, and how to interpret and report your results following APA standards. After completing the course, you will be able to: Translate a verbal theory into a conceptual model, and translate a conceptual model into a statistical model. Independently analyze data using the free, open-source statistical software R. Apply a latent variable model to a real-life problem wherein the observed variables are only indirect indicators of an unobserved construct. Use a path model to represent the hypothesized causal relations among several variables, including relationships such as mediation and moderation. Explain to a fellow student how structural equation modeling combines latent variable models with path models and the benefits of doing so. Reflect critically on the decisions involved in defining and estimating structural equation models. "],["resources.html", "Resources", " Resources Literature You do not need a separate book for this course! Most of the information is contained within this GitBook and the course readings (which you will be able to access via links in this GitBook). All literature is freely available online, as long as you are logging in from within the UU-domain (i.e., from the UU campus or through an appropriate VPN). All readings are linked in this GitBook via either direct download links of DOIs. If you run into any trouble accessing a given article, searching for the title using Google Scholar or the University Library will probably due the trick. Software You will do all of your statistical analyses with the statistical programming language/environment R and the add-on package lavaan. If you want to expand your learning, you can follow this excellent lavaan tutorial. Doing so is entirely optional, though. "],["reading-questions.html", "Reading questions", " Reading questions Along with every article, we will provide reading questions. You will not be graded on the reading questions, but it is important to prepare the reading questions before every lecture. The reading questions serve several important purposes: Provide relevant background knowledge for the lecture Help you recognize and understand the key terms and concepts Make you aware of important publications that shaped the field Help you extract the relevant insights from the literature "],["weekly-preparation.html", "Weekly preparation", " Weekly preparation Before every class meeting (both lectures and practicals) you need to do the assigned homework (delineated in the GitBook chapter for that week). This course follows a flipped classroom procedure, so you must complete the weekly homework to meaningfully participate in, and benefit from, the class meetings. Background knowledge We assume you have basic knowledge about multivariate statistics before entering this course. You do not need any prior experience working with R. If you wish to refresh your knowledge, we recommend the chapters on ANOVA, multiple regression, and exploratory factor analysis from Field’s Discovering Statistics using R. If you cannot access the Field book, many other introductory statistics textbooks cover these topics equally well. So, use whatever you have lying around from past statistics courses. You could also try one of the following open-access options: Applied Statistics with R Introduction to Modern Statistics Introduction to Statistical Learning "],["grading.html", "Grading", " Grading Your grade for the course is based on a “portfolio” composed of the three take-home assignments: Latent variable modeling Deadline: 2022-10-07 23:59 Group assignment Contributes 25% of your course grade Path modeling Deadline: 2022-10-28 23:59 Group assignment Contributes 25% of your course grade Full Structural equation modeling Deadline: 2022-11-11 23:59 Individual assignment Contributes 50% of your course grade The specifics of the assignments will soon be given as a separate chapter in this GitBook. "],["attendance.html", "Attendance", " Attendance Attendance is not mandatory, but we strongly encourage you to attend all lectures and practicals. In our experience, students who actively participate tend to pass the course, whereas those who do not participate tend to drop out or fail. The lectures and practicals build on each other, so, in the unfortunate event that you have to miss a class meeting, please make sure you have caught up with the material before the next session. "],["software-setup.html", "Software Setup", " Software Setup This chapter will help you prepare for the course by showing how to install R and RStudio on your computer. If you’re already using R, there may be nothing new for you here. That being said, you should look over this chapter to ensure that your current setup will be compatible with the course requirements. If you have never used R before, this chapter is essential! The information is this chapter will be crucial for getting your computer ready for the course. "],["typographic-conventions.html", "0.1 Typographic Conventions", " 0.1 Typographic Conventions Throughout this GitBook, we (try to) use a consistent set of typographic conventions: Functions are typeset in a code font, and the name of the function is always followed by parentheses E.g., sum(), mean() Other R objects (e.g., data objects, function arguments) are in also typeset in a code font but without parentheses E.g., seTE, method.tau Sometimes, we’ll use the package name followed by two colons (::, the so-called *scope-resolution operator), like lavaan::sem(). This command is valid R code and will run if you copy it into your R console. The lavaan:: part of the command tells R that we want to use the sem() from the lavaan package. "],["installing-software.html", "0.2 Installing software", " 0.2 Installing software Before we start the course, we have to install three things: R: A free program for statistical programming RStudio: An integrated development environment (IDE) which makes it easier to work with R. Several packages: Separate pieces of ‘add-on’ software for R with functions to do specific analyses. Packages also include documentation describing how to use their functions and sample data. 0.2.1 Installing R The latest version of R is available here. Click the appropriate link for your operating system and follow the instructions for installing the latest stable release. Depending on which OS you select, you may be given an option to install different components (e.g., base, contrib, Rtools). For this course, you will only need the base package. 0.2.2 Installing RStudio Download the Free Desktop version of RStudio from the download page of the RStudio website. 0.2.3 Installing packages To participate in this course, you will need a few essential R packages. Here’s an overview of the packages and why we need them: Package Description lavaan A sophisticated and user-friendly package for structural equation modeling ggplot2 A flexible and user-friendly package for making graphs tidySEM Plotting and tabulating the output of SEM-models semTools Comparing models, establishing measurement invariance across groups psych Descriptive statistics foreign Loading data from SPSS ‘.sav’ files readxl Loading data from Excel ‘.xslx’ files To install these packages, we use the install.packages() function in R. Open RStudio Inside RStudio, find the window named Console on left side of the screen. Copy the following code into the console and hit Enter/Return to run the command. install.packages(c(&quot;lavaan&quot;, &quot;ggplot2&quot;, &quot;tidySEM&quot;, &quot;semTools&quot;, &quot;psych&quot;, &quot;foreign&quot;, &quot;readxl&quot;), dependencies = TRUE) "],["getting-the-course-data.html", "0.3 Getting the course data", " 0.3 Getting the course data All of the data files you will need for the course are available in this SurfDrive directory. Follow the link to download a ZIP archive containing the data you will need to complete the practical exercises. Extract these data files to a convenient location on your computer. "],["r-tutorial.html", "R Tutorial", " R Tutorial Welcome to the world of R! This chapter provides a tutorial based on “R: How to get started” by Ihnwhi Heo, Duco Veen, and Rens van de Schoot. If you already have a good deal of R experience, and you don’t see anything new in this tutorial, feel free to skip this chapter. If you haven’t worked with R before, I strongly encourage you to spend some time carefully working through this tutorial. The content of this chapter will go a long way towards familiarizing you with the basic R commands that you will need to use at the beginning of the course. "],["who-r-you.html", "0.4 Who R you?", " 0.4 Who R you? R is a piece of free software for statistical computation and graphics. R is also fully open-source, which means anyone (even you!) can improve, develop, and contribute to R You can find the official manual from the R Core Team here: An introduction to R R itself looks a bit old-fashioned and tedious: "],["rstudio.html", "0.5 RStudio", " 0.5 RStudio Thankfully, we have a great user interface for R called RStudio! RStudio helps you use and learn R more easily. Although you are interacting with RStudio, you are still using R. Don’t ever write something like, “We conducted all analysis with RStudio…” For this course, all tutorials and practicals will use RStudio. 0.5.1 No ‘pane’, no gain! When you open RStudio, the screen should look something like the following image. You will notice that the window is divided into ‘panes’ (a pane is a division of a window). Before we explain these three panes, I want you to add another, which you will see if you open an R script. An R script is simply a plain-text file wherein you will write the R code that executes your analyses. When you open an R script (or create a new one, which is really the same thing), a fourth pane appears. 0.5.2 Create a new R script To create a new R script, Click the icon with a plus sign on the paper (highlighted below by the red square). When you click this icon, a new script is generated and appears in a fourth pane on the upper left side of the screen (if you’re using the default layout). Note that this script is not yet saved anywhere. If you close this script without saving, you will lose all its contents. The four panes help organize your workflow. Rstudio is an integrated development environment (IDE) that is meant to integrate all of the tasks you may need to do for any R-based analysis, programming, or development. Hence, in RStudio, the intended workflow will have you do everything in one window, and the four panes make this workflow more efficient (in theory, at least). 0.5.3 What do the four panes do? Note that the following descriptions apply to the default layout. You can change the orientation and content of the panes (although you must always have four). Source Pane: Located in the top left quadrant. This pane is also called the “Editor”, because this is where we edit scripts. We will usually type our code in the source pane. Console Pane: Located in the bottom left quadrant. This pane is for direct communication with R. We can type commands here that are immediately evaluated (whereas the commands in a script are only evaluated when we explicitly run them). Furthermore, all output from the R commands that we run (either via the console or a script) is printed in the console pane. The two panes on the right side of the window contain various tabs. Two of these tabs are especially useful. Environment Tab: Located in the upper right quadrant The environment tab contains all the ‘objects’ currently loaded in your R session. You can always check what objects are loaded under the environment tab. The ‘environment’ is also called the ‘workspace’ Plots Tab: Located in the lower right quadrant The plots tab shows any graphs and figures we draw via R commands. If you zoom by clicking the magnifying glass icon, you can see enlarged versions of the plots. "],["rstudio-projects.html", "0.6 RStudio projects", " 0.6 RStudio projects To keep all your work organized, you can use an RStudio Project. One advantage of using RStudio projects is that the project directory is automatically set as the working directory. If you save your data in the directory that contains the “.Rproj” file, you will can load the data without specifying the file path. 0.6.1 Starting a new project in Rstudio In Rstudio, click on the New project button: In the pop-up dialog, click New Directory. Click New Project. Type the desired directory name in the dialog box Give a meaningful name, e.g., “TCSM_Course”. Use the Browse button if you need to change the location of the directory that you will use to store this project. "],["loading-data.html", "0.7 Loading data", " 0.7 Loading data Statistical analysis cannot happen without data. In R, you can load data in various ways. Let’s go over a couple of these. To complete the following exercise, first download the LifeSat.sav data. 0.7.1 Via clicky-box options Click through the following menu options: File &gt; Import Dataset Choose the type of dataset. For this exercise, the data are stored as an SPSS .sav file. Thus, select the From SPSS option. You may encounter an Install Required Packages pop-up dialog with a message that asks you whether you want to install the haven package. A package is an a piece of add-on software for R. To do most analyses, you will need some packages above-and-beyond the Base R software. In this case, haven contains functions that allow R to read SPSS data files. Click ‘Yes’ to install the package. At this point, the Import Statistical Data pop-up dialog should appear. Provide the location of your data file in the File/URL field. You can type the file path directly. You can also click Browse to find the file via a GUI interface. You should now see your data in the Data Preview area. In the Import Options section, you can set the name and format of your data file. All of your your selections are being translated to the R-code required to load your file. In the Code Preview area, the steps required to load the data with your selected options are expressed in terms of code. Finally, click Import at the lower right side of the window to load your data. 0.7.2 Via R code Of course, we don’t have to use tedious clicky-box processes. Once you get more familiar with R, it will be much easier to load data with R code. For this exercise, we will use the read.spss() function from the foreign package. Copy the following code into an R-script. Note that this code assumes you have saved your data in the working directory (this is the project directory if you’re using an R project). Otherwise, you will need to specify the file path to your data file as the first argument. library(foreign) LifeSat &lt;- read.spss(&quot;LifeSat.sav&quot;, to.data.frame = TRUE, use.value.labels = FALSE) To run the code: Place your cursor on the first line of code. Press the Ctrl/Cmd + Enter keys together. The code should now be evaluated by R, and R will tell you the result of its actions in the console pane. 0.7.2.1 Data frames When we read data into R, the data are most often stored as a special type of object called a data frame. Data frames are the preferred way to handle data in R. Data frames can hold variables with different types (e.g., a numeric depression rating, a categorical grouping factor representing employment status, and a character string recording the response to an open-ended question). The option to.data.frame = TRUE in the read.spss() call above loads the data into a data frame. 0.7.3 From Excel files We can also load data that are stored in Excel files. One way to do so is via the readxl package. ## Load the package: library(readxl) ## Read the first sheet of &#39;LifeSat.xlsx&#39; into &#39;LifeSat&#39;: LifeSat &lt;- read_excel(&quot;LifeSat.xlsx&quot;, sheet = 1) "],["exploring-data-via-r-functions.html", "0.8 Exploring data via R functions", " 0.8 Exploring data via R functions If you look a bit more closely at the R code that we used to load the data, you will see two special commands: library() and read.spss(). These commands are called functions. Any R command that is written as a name followed by parentheses, e.g., mean(), is a function. Functions are the driving force behind all R-based data analysis. Functions tell R to perform a specific (potentially very complicated) task. Rather than having to write out along sequence of commands every time we want to do some task, we can simply call the appropriate function. When using functions, you need to provide appropriate inputs to specify the behavior of the function and give the function data on which to operate. These inputs are called function arguments. Let’s explore three new functions and their arguments. These functions can help us understand our data. 0.8.1 head() Our data comprise many rows. We can use the head() function to inspect the first several rows. To use the head() function, you only need to provide one argument: The name of the dataset. ## Inspect the first several rows head(LifeSat) “Wait, what is the hash tag (#) doing there?” Don’t be surprised. The hash tag creates a “comment”. I.e., a bit of text that will not be evaluated by R. Comments let us write notes to explain what a particular piece of code does. Comments are doubly useful. They can help others understand your code. They can also help you remember what the code does after some time away. Copy the preceding code into your R script and run it. If all went well, R should now show the first six rows of the dataset in the console. 0.8.2 str() We frequently want to know something about the types of variables in a dataset. For example, if you want to run an analysis of variance (ANOVA), the independent variable(s) should be categorical. In R, these variables would be represented by a special type of variable called a factor. Before running our analysis, we should check if are data satisfy this requirement. We can use the str() function to get some information about the structure of an R object (str is an abbreviation of structure). To run the str() function, you only need to provide one argument: the name of the dataset. ## Inspect the structure of the dataset str(LifeSat) ## &#39;data.frame&#39;: 98 obs. of 8 variables: ## $ LifSat : num 13 18 19 24 24 24 30 33 33 33 ... ## $ age : num 75 75 72 72 70 73 72 72 68 73 ... ## $ educ : num 6 5 5 6 5 6 6 5 7 6 ... ## $ gender : num 2 2 2 2 1 2 1 2 1 1 ... ## ..- attr(*, &quot;value.labels&quot;)= Named chr [1:2] &quot;2&quot; &quot;1&quot; ## .. ..- attr(*, &quot;names&quot;)= chr [1:2] &quot;male&quot; &quot;female&quot; ## $ female : num 0 0 0 0 1 0 1 0 1 1 ... ## $ ChildSup: num 4 6 6 6 6 8 8 7 4 8 ... ## $ SpouSup : num 2 5 5 4 5 6 4 6 2 8 ... ## $ SES : num 3 1 1 1 1 1 1 2 2 2 ... ## ..- attr(*, &quot;value.labels&quot;)= Named chr [1:3] &quot;3&quot; &quot;2&quot; &quot;1&quot; ## .. ..- attr(*, &quot;names&quot;)= chr [1:3] &quot;high SES&quot; &quot;middle SES&quot; &quot;low SES&quot; ## - attr(*, &quot;variable.labels&quot;)= Named chr [1:8] &quot;&quot; &quot;&quot; &quot;Years of education&quot; &quot;&quot; ... ## ..- attr(*, &quot;names&quot;)= chr [1:8] &quot;LifSat&quot; &quot;age&quot; &quot;educ&quot; &quot;gender&quot; ... ## - attr(*, &quot;codepage&quot;)= int 1252 According to the output printed to the console, the LifeSat dataset is a data frame consisting of 98 observations of 8 variables. I.e., our dataset has 98 rows and 8 columns. We also get information about the contents of each column. For the fist column, we see $ LifSat : num 13 18 19 24 24 24 30 33 33 33 ... The LifSat variable is numeric (abbreviated as num). 13 is the value in the first row, 18 is the value in the second row, 19 is the value in the third row, and so on. 0.8.3 summary() We can get the descriptive statistics of the variables in a dataset with the summary() function. Again, we only need to provide one argument: the name of the dataset. summary(LifeSat) ## LifSat age educ gender ## Min. : 13.00 Min. :64.00 Min. : 4.000 Min. :1.000 ## 1st Qu.: 44.25 1st Qu.:68.25 1st Qu.: 6.000 1st Qu.:1.000 ## Median : 58.00 Median :70.00 Median : 6.000 Median :1.000 ## Mean : 57.86 Mean :70.26 Mean : 6.541 Mean :1.449 ## 3rd Qu.: 69.75 3rd Qu.:72.00 3rd Qu.: 7.000 3rd Qu.:2.000 ## Max. :100.00 Max. :75.00 Max. :12.000 Max. :2.000 ## female ChildSup SpouSup SES ## Min. :0.000 Min. : 3.000 Min. : 2.000 Min. :1.000 ## 1st Qu.:0.000 1st Qu.: 6.000 1st Qu.: 5.000 1st Qu.:1.000 ## Median :1.000 Median : 7.000 Median : 6.000 Median :2.000 ## Mean :0.551 Mean : 6.857 Mean : 6.061 Mean :1.918 ## 3rd Qu.:1.000 3rd Qu.: 8.000 3rd Qu.: 8.000 3rd Qu.:2.000 ## Max. :1.000 Max. :10.000 Max. :10.000 Max. :3.000 Run the above code and check the output in the console. You should see descriptive statistics for each variable in the dataset. E.g., for LifSat, the minimum value is 13, the median is 58, and the mean is 57.86. "],["plotting-data.html", "0.9 Plotting data", " 0.9 Plotting data It is almost always a good idea to visualize your data before you dive into a full statistical analysis. For example, you may like to know something about the nature of the relationship between two specific variables, the distribution of some set of values, etc. In this section, we will create three basic plots of our data. When we create these plots, the figures will appear in the plots tab in the lower right quadrant of the RStudio window. 0.9.1 R packages and ggplot2 We will use the ggplot2 package for plotting. This package is not part of the Base R installation. So, you must install ggplot2 yourself (you should have already done so in Section 0.2.3). You only need to install an R package once. R packages are just small software programs, so they must be installed just like any other piece of software. After installing, the package is accessible on your computer but not yet available for use in your current R session. You must first load the package. You need to load the package every time you want to use it in a new R session. After loading, the package contents (i.e., functions, help files, datasets) are initialized in memory and ready to use in your current R session. Loading a package is more-or-less equivalent to ‘opening’ a software program by clicking on its desktop icon. Run the following code to load the ggplot2 package. library(ggplot2) 0.9.2 Histogram We can use a histogram to visualize how the values of a continuous variable are distributed. ## Use the &#39;LifeSat&#39; data to create the plot ## Use the &#39;LifeSat$LifSat&#39; variable to define the X-axis ggplot(data = LifeSat, aes(x = LifSat)) + geom_histogram() # Create a histogram from the data/variable defined above 0.9.3 Boxplot A boxplot provides another useful visualization of a condituous variable’s distribution. We can also use boxplots to detect outliers. ## Same data/variable setup as above: ggplot(data = LifeSat, aes(x = LifSat)) + geom_boxplot() # Create a boxplot 0.9.4 Scatterplot A scatterplot provides a visual representation of the relationship between two variables. Since we are now plotting two variables, we need to define a y variable in addition to thex variable specified in the previous examples. ## Add the &#39;age&#39; variable on the Y-axis: ggplot(data = LifeSat, aes(x = LifSat, y = age)) + geom_point() # Create a scatterplot "],["manipulating-data.html", "0.10 Manipulating Data", " 0.10 Manipulating Data 0.10.1 Data types Recall the output of the str() function. One piece of information contained therein is the type of data stored in each column of our dataset. There a different abbreviations signifying different types of data. Abbreviation Type Description num Numeric All values are numbers (e.g., 1.02) chr Character All values are words log Logical Boolean flags: TRUE or FALSE factor Factor A special type of object with labels to represent the levels of a categorical variable 0.10.2 Factors Factors are a special type of data object that R uses to represent categorical variables. A factor is stored internally as a vector of integers where each group is represented by a different number. The groups also get descriptive labels. R knows that a factor is not numeric and will treat any factor as a nominal grouping variable for anlaysis. In the output from the str() function in 0.8.2, we see that the gender variable is stored as a numeric variable. You can confirm by running either of the following commands. is.numeric(LifeSat$gender) ## [1] TRUE class(LifeSat$gender) ## [1] &quot;numeric&quot; The gender varible is a binary grouping variable, so it should be stored as a factor. To convert gender to a factor, we can use the factor() function. ## Convert &#39;gender&#39; to a factor: LifeSat$gender &lt;- factor(LifeSat$gender) ## Check the results: is.numeric(LifeSat$gender) ## [1] FALSE class(LifeSat$gender) ## [1] &quot;factor&quot; str(LifeSat$gender) ## Factor w/ 2 levels &quot;1&quot;,&quot;2&quot;: 2 2 2 2 1 2 1 2 1 1 ... We now see that gender has been converted to a factor with the levels “1” and “2”. We don’t have to settle for meaningless numeric labels, though. We can assign meaningful value labels by providing an appropriate input for the labels argument. ## Create a factor with meaningful labels: LifeSat$gender &lt;- factor(LifeSat$gender, labels = c(&quot;Female&quot;, &quot;Male&quot;)) ## Check the results: str(LifeSat$gender) ## Factor w/ 2 levels &quot;Female&quot;,&quot;Male&quot;: 2 2 2 2 1 2 1 2 1 1 ... 0.10.3 Subsetting: Extracting one variable When working with data frames, we can extract a single variable (i.e., column) from the data using the dollar sign operator, $. As shown in the example below. # Extract the &#39;LifSat&#39; variable from &#39;LifeSat&#39;: LifeSat$LifSat ## [1] 13 18 19 24 24 24 30 33 33 33 33 33 35 35 37 37 41 41 41 ## [20] 43 43 43 44 44 44 45 47 48 48 48 50 51 51 52 53 53 53 53 ## [39] 54 55 55 56 56 56 57 58 58 58 58 58 58 59 59 60 61 61 63 ## [58] 63 63 65 66 67 67 67 67 68 68 68 69 69 69 69 69 70 70 70 ## [77] 71 72 74 74 76 77 77 78 78 79 79 79 81 81 82 83 85 86 87 ## [96] 91 99 100 In the above code, we ask R to extract the column named LifSat from the data frame named LifeSat. The result will be returned as another special type of object: a vector. 0.10.4 Subsetting: Extracting rows and columns We can also extract rectangular subsets of a data frame using the following convention: my_data_frame[row_numbers, column_numbers]. ## Extract the first four rows of the first two columns: LifeSat[1:4, 1:2] By leaving either rows or columns empty, we get all rows or columns: ## Extract all rows of first two columns: LifeSat[ , 1:2] ## Extract all columns of first two rows: LifeSat[1:2, ] We can refer to the columns by name, too: LifeSat[1:2, c(&quot;age&quot;, &quot;educ&quot;)] 0.10.5 Subsetting based on logical conditions We can also select rows or columns that satisfy logical conditions. In the following code, we select only the rows for which LifeSat$age is greater than 70. LifeSat[LifeSat$age &gt; 70, ] This approach works for any valid logical expression that will flag rows (or columns). Below, we select only the males and save the subset as a new object, LifeSat_male. LifeSat_male &lt;- LifeSat[LifeSat$gender == &quot;Male&quot;, ] str(LifeSat_male) ## &#39;data.frame&#39;: 44 obs. of 8 variables: ## $ LifSat : num 13 18 19 24 24 33 33 35 35 37 ... ## $ age : num 75 75 72 72 73 72 72 68 71 68 ... ## $ educ : num 6 5 5 6 6 5 12 6 4 7 ... ## $ gender : Factor w/ 2 levels &quot;Female&quot;,&quot;Male&quot;: 2 2 2 2 2 2 2 2 2 2 ... ## $ female : num 0 0 0 0 0 0 0 0 0 0 ... ## $ ChildSup: num 4 6 6 6 8 7 5 6 7 4 ... ## $ SpouSup : num 2 5 5 4 6 6 6 6 7 4 ... ## $ SES : num 3 1 1 1 1 2 2 3 1 2 ... ## - attr(*, &quot;variable.labels&quot;)= Named chr [1:8] &quot;&quot; &quot;&quot; &quot;Years of education&quot; &quot;&quot; ... ## ..- attr(*, &quot;names&quot;)= chr [1:8] &quot;LifSat&quot; &quot;age&quot; &quot;educ&quot; &quot;gender&quot; ... ## - attr(*, &quot;codepage&quot;)= int 1252 0.10.6 Changing cell values We can easily overwrite values in a dataset using the same type of subsetting operations shown above in combination with the assignment operator, &lt;-. The following code will extract the 5th entry in the LifSat variable. LifeSat[5, &quot;LifSat&quot;] ## [1] 24 Actually, it’s not really accurate to say that the above code “extracts” any value. The above command creates a new temporary object containing only the relevant value and prints the contents of that object to the console. All the subsetting examples above (other than the selection of all males) have done something similar. Rather than thinking about the [] or $ selection operators as ways of extracting pieces of a data object, it’s more appropriate to think about these operators as selecting, highlight, activating, nominating (or some other such concept) the referenced elements. Once the elements are so selected, we can also overwrite their original values. We only need to assign new values to the subset. To demonstrate, let’s overwrite the value selected above with 10. ## Overwrite the 5th &#39;LifSat&#39; value: LifeSat[5, &quot;LifSat&quot;] &lt;- 10 ## Check the result: LifeSat[5, &quot;LifSat&quot;] ## [1] 10 "],["getting-help.html", "0.11 Getting Help", " 0.11 Getting Help As you start to apply the techniques described in this guide, you will soon have questions that the guide does not answer. This section describes a few tips on how to get help answering these questions. Every function in R has documentation (i.e., a help file). To see this file in RStudio, select the name of the function in your script, and press F1, or run the command ? followed by the name of the function (e.g., ?aov). The second option works outside of RStudio, too. If you get stuck, start with Google. Typically, adding “R” to a search is enough to return relevant results (e.g., “exploratory factor analysis R”). Google is particularly useful for error messages. If you get an error message that you don’t understand, try googling it. Someone else has almost certainly been confused by the same message in the past, and there will be help somewhere on the web. If the error message isn’t in English, run Sys.setenv(LANGUAGE = \"en\") and re-run the code that produced the error (you’re more likely to find help for English error messages.) If Google doesn’t help, try stackoverflow. Before posting your question, spend some time searching the site for an existing answer (active contributors really hate it when you ask a question that has already been answered on the site). Including R restricts your search to questions and answers that use R. Lastly, if you find errors (or typos!) in this guide’s text or R syntax, feel free to contact me (Kyle Lang). "],["introduction.html", "1 Introduction", " 1 Introduction Homework before the lecture Complete the preparatory material: Read over the Course Information chapter Work through the Software Setup chapter Work through the R Tutorial chapter Watch the Lecture Recording for this week. Complete the Reading for this week, and answer the associated reading questions. Complete the Formative Assessment for this week. Lecture content We start with a brief introduction to the course, the course goals and rules, and the general idea of statistical modeling. We will introduce the type of models that we will consider in this course. We will shortly discuss several related concepts: Model simplicity/complexity Model fit Graphical representations of model parameters Interpretations of model parameters Homework before the practical Complete the At-Home Exercises. Practical content During the practical you will work on the In-Class Exercises. "],["lecture.html", "1.1 Lecture", " 1.1 Lecture Download slides The first lecture will be used to introduce the concept of fitting models to data and explain some important concepts and notation that will be used during this course. "],["reading.html", "1.2 Reading", " 1.2 Reading Reference Smaldino, P. E. (2017). Models are stupid, and we need more of them. Computational social psychology, 311–331. SKIP PAGES 322 - 327 Questions What are the differences between a “verbal model” and a “formal model”? As explained in the paragraph “A Brief Note on Statistical Models”, formal models are not the same as statistical models. Still, we can learn a lot from Smaldino’s approach. Write down three insights from this paper that you would like to apply to your statistical modeling during this course. "],["formative-assessment.html", "1.3 Formative Assessment", " 1.3 Formative Assessment A formative assessment helps you judge your progress in the course and helps you address any blind spots in your understanding of the material. This assessment does not contribute to your course grade. If you get a question wrong, you will receive a hint on how to improve your understanding of the material. Ideally, you should complete this assessment after you have watched the lecture recording, but before the lecture meeting. This way, if you discover gaps in your understanding, we can discuss any topics that need more attention during the lecture meeting. Question 1: A model with more degrees of freedom will… fit the data better fit the data worse Question 2: What are degrees of freedom? The number of unique pieces of information minus number of parameters The number of parameters Number of participants minus number of parameters The number of unique pieces of information Question 3: Multiple regression and ANCOVA are statistically equivalent. FALSE TRUE Question 4: A psychologist administers a test intended to measure intelligence. Participants complete different puzzles and answer different questions. From a measurement theory point of view, what kind of variable is intelligence in this context? A dependent variable A latent variable A measurement variable An observed variable Question 5: The error term (\\(\\epsilon_i\\)) in regression equations reflects how much the observed scores of individuals differ from their predicted scores. TRUE FALSE Question 6: What kind of model is depicted above? Multiple regression A measurement model A path model ANOVA with dummies Question 7: A model with more degrees of freedom is… more complex more simple Question 8: In OLS regression, a model is fit to the individual participant data. By contrast, regression in structural equation modeling fits a model to the observed covariance matrix. TRUE FALSE Question 9: In the equation \\(Y_i = a + bX_i + e_i\\), what are the ‘model parameters’? \\(a\\) and \\(bX_i\\) \\(Y_i, X_i\\) and \\(e_i\\) \\(Y\\) and \\(X\\) \\(a\\) and \\(b\\) "],["at-home-exercises.html", "1.4 At-Home Exercises", " 1.4 At-Home Exercises Load the LifeSat.sav data. 1.4.1 Make a table of descriptive statistics for the variables: LifSat, educ, ChildSup, SpouSup, and age. What is the average age in the sample? What is the ange (youngest and oldest child)? Hint: Use the tidySEM::descriptives() function.` Click for explanation The package tidySEM contains the descriptives() function for computing descriptive statistics. The describe() function in the psych package is a good alternative. library(tidySEM) descriptives(LifeSat[ , c(&quot;LifSat&quot;, &quot;educ&quot;, &quot;ChildSup&quot;, &quot;SpouSup&quot;, &quot;age&quot;)]) 1.4.2 Run a simple linear regression with LifSat as the dependent variable and educ as the independent variable. Hints: The lm() function (short for linear model) does linear regression. The summary() function provides relevant summary statistics for the model. It can be helpful to store the results of your analysis in an object. Click for explanation results &lt;- lm(LifSat ~ educ, data = LifeSat) summary(results) ## ## Call: ## lm(formula = LifSat ~ educ, data = LifeSat) ## ## Residuals: ## Min 1Q Median 3Q Max ## -44.158 -11.678 2.212 12.541 43.212 ## ## Coefficients: ## Estimate Std. Error t value Pr(&gt;|t|) ## (Intercept) 34.418 8.003 4.301 4.09e-05 *** ## educ 3.562 1.192 2.988 0.00356 ** ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Residual standard error: 17.93 on 96 degrees of freedom ## Multiple R-squared: 0.08511, Adjusted R-squared: 0.07558 ## F-statistic: 8.931 on 1 and 96 DF, p-value: 0.00356 1.4.3 Repeat the analysis from 1.4.2 with age as the independent variable. Click for explanation results &lt;- lm(LifSat ~ age, data = LifeSat) summary(results) ## ## Call: ## lm(formula = LifSat ~ age, data = LifeSat) ## ## Residuals: ## Min 1Q Median 3Q Max ## -48.230 -14.025 3.321 13.745 40.770 ## ## Coefficients: ## Estimate Std. Error t value Pr(&gt;|t|) ## (Intercept) 199.6492 53.1261 3.758 0.000294 *** ## age -2.0203 0.7557 -2.673 0.008829 ** ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Residual standard error: 18.08 on 96 degrees of freedom ## Multiple R-squared: 0.06928, Adjusted R-squared: 0.05959 ## F-statistic: 7.146 on 1 and 96 DF, p-value: 0.008829 1.4.4 Repeat the analysis from 1.4.2 and 1.4.3 with ChildSup as the independent variable. Click for explanation results &lt;- lm(LifSat ~ ChildSup, data = LifeSat) summary(results) ## ## Call: ## lm(formula = LifSat ~ ChildSup, data = LifeSat) ## ## Residuals: ## Min 1Q Median 3Q Max ## -45.131 -11.875 0.862 12.595 44.869 ## ## Coefficients: ## Estimate Std. Error t value Pr(&gt;|t|) ## (Intercept) 37.052 8.487 4.366 3.2e-05 *** ## ChildSup 3.013 1.208 2.494 0.0144 * ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Residual standard error: 18.17 on 96 degrees of freedom ## Multiple R-squared: 0.06083, Adjusted R-squared: 0.05105 ## F-statistic: 6.218 on 1 and 96 DF, p-value: 0.01436 1.4.5 Run a multiple linear regression with LifSat as the dependent variable and educ, age, and ChildSup as the independent variables. Hint: You can use the + sign to add multiple variables to the RHS of your model formula. Click for explanation results &lt;- lm(LifSat ~ educ + age + ChildSup, data = LifeSat) summary(results) ## ## Call: ## lm(formula = LifSat ~ educ + age + ChildSup, data = LifeSat) ## ## Residuals: ## Min 1Q Median 3Q Max ## -41.525 -12.472 2.601 11.235 42.108 ## ## Coefficients: ## Estimate Std. Error t value Pr(&gt;|t|) ## (Intercept) 132.5942 54.2325 2.445 0.0164 * ## educ 2.9123 1.1640 2.502 0.0141 * ## age -1.5766 0.7316 -2.155 0.0337 * ## ChildSup 2.4554 1.1564 2.123 0.0364 * ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Residual standard error: 17.23 on 94 degrees of freedom ## Multiple R-squared: 0.1732, Adjusted R-squared: 0.1468 ## F-statistic: 6.565 on 3 and 94 DF, p-value: 0.0004452 1.4.6 Compare the results from 1.4.5 with those from 1.4.2, 1.4.3, and 1.4.4. What do you notice when you compare the estimated slopes for each of the three predictors in the multiple regression model with the corresponding estimates from the simple regression models? "],["in-class-exercises.html", "1.5 In-Class Exercises", " 1.5 In-Class Exercises Coming soon to a GitBook near you! "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
